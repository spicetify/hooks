// @ts-ignore
// @deno-types="jsr:@std/collections@1.0.5"
export * from "data:application/javascript;base64,function mapEntries(record,transformer){const result={};const entries=Object.entries(record);for(const entry of entries){const[mappedKey,mappedValue]=transformer(entry);result[mappedKey]=mappedValue;}return result;}export{mapEntries as mapEntries};function aggregateGroups(record,aggregator){return mapEntries(record,([key,values])=>[key,values.reduce((accumulator,current,currentIndex)=>aggregator(current,key,currentIndex===0,accumulator),undefined)]);}export{aggregateGroups as aggregateGroups};function associateBy(array,selector){const result={};for(const element of array){result[selector(element)]=element;}return result;}export{associateBy as associateBy};function associateWith(array,selector){const result={};for(const element of array){result[element]=selector(element);}return result;}export{associateWith as associateWith};function chunk(array,size){if(size<=0||!Number.isInteger(size)){throw new RangeError(`Expected size to be an integer greater than 0 but found ${size}`);}const result=[];let index=0;while(index<array.length){result.push(array.slice(index,index+size));index+=size;}return result;}export{chunk as chunk};function filterInPlace(array,predicate){let outputIndex=0;for(const cur of array){if(!predicate(cur)){continue;}array[outputIndex]=cur;outputIndex+=1;}array.splice(outputIndex);return array;}function deepMerge(record,other,options){return deepMergeInternal(record,other,new Set,options);}function deepMergeInternal(record,other,seen,options){const result={};const keys=new Set([...getKeys(record),...getKeys(other)]);for(const key of keys){if(key==="__proto__"){continue;}const a=record[key];if(!Object.hasOwn(other,key)){result[key]=a;continue;}const b=other[key];if(isNonNullObject(a)&&isNonNullObject(b)&&!seen.has(a)&&!seen.has(b)){seen.add(a);seen.add(b);result[key]=mergeObjects(a,b,seen,options);continue;}result[key]=b;}return result;}function mergeObjects(left,right,seen,options={arrays:"merge",sets:"merge",maps:"merge"}){if(isMergeable(left)&&isMergeable(right)){return deepMergeInternal(left,right,seen,options);}if(isIterable(left)&&isIterable(right)){if(Array.isArray(left)&&Array.isArray(right)){if(options.arrays==="merge"){return left.concat(right);}return right;}if(left instanceof Map&&right instanceof Map){if(options.maps==="merge"){return new Map([...left,...right]);}return right;}if(left instanceof Set&&right instanceof Set){if(options.sets==="merge"){return new Set([...left,...right]);}return right;}}return right;}function isMergeable(value){return Object.getPrototypeOf(value)===Object.prototype;}function isIterable(value){return typeof value[Symbol.iterator]==="function";}function isNonNullObject(value){return value!==null&&typeof value==="object";}function getKeys(record){const result=Object.getOwnPropertySymbols(record);filterInPlace(result,key=>Object.prototype.propertyIsEnumerable.call(record,key));result.push(...Object.keys(record));return result;}export{deepMerge as deepMerge};function distinct(array){const set=new Set(array);return Array.from(set);}export{distinct as distinct};function distinctBy(array,selector){const selectedValues=new Set;const result=[];for(const element of array){const selected=selector(element);if(!selectedValues.has(selected)){selectedValues.add(selected);result.push(element);}}return result;}export{distinctBy as distinctBy};function dropLastWhile(array,predicate){let offset=array.length;while(0<offset&&predicate(array[offset-1]))offset--;return array.slice(0,offset);}export{dropLastWhile as dropLastWhile};function dropWhile(array,predicate){let offset=0;const length=array.length;while(length>offset&&predicate(array[offset])){offset++;}return array.slice(offset,length);}export{dropWhile as dropWhile};function filterEntries(record,predicate){const result={};const entries=Object.entries(record);for(const[key,value]of entries){if(predicate([key,value])){result[key]=value;}}return result;}export{filterEntries as filterEntries};function filterKeys(record,predicate){const result={};for(const[key,value]of Object.entries(record)){if(predicate(key)){result[key]=value;}}return result;}export{filterKeys as filterKeys};function filterValues(record,predicate){const result={};const entries=Object.entries(record);for(const[key,value]of entries){if(predicate(value)){result[key]=value;}}return result;}export{filterValues as filterValues};function findSingle(array,predicate){let match;let found=false;for(const element of array){if(predicate(element)){if(found)return undefined;found=true;match=element;}}return match;}export{findSingle as findSingle};function firstNotNullishOf(array,selector){for(const current of array){const selected=selector(current);if(selected!==null&&selected!==undefined){return selected;}}return undefined;}export{firstNotNullishOf as firstNotNullishOf};function includesValue(record,value){for(const i in record){if(Object.hasOwn(record,i)&&(record[i]===value||Number.isNaN(value)&&Number.isNaN(record[i]))){return true;}}return false;}export{includesValue as includesValue};function intersect(...arrays){const[array,...otherArrays]=arrays;let set=new Set(array);for(const array of otherArrays){set=set.intersection(new Set(array));if(set.size===0)break;}return[...set];}export{intersect as intersect};function invertBy(record,transformer){const result={};for(const[key,value]of Object.entries(record)){const mappedKey=transformer(value);if(!Object.hasOwn(result,mappedKey)){result[mappedKey]=[key];}else{result[mappedKey].push(key);}}return result;}export{invertBy as invertBy};function invert(record){return Object.fromEntries(Object.entries(record).map(([key,value])=>[value,key]));}export{invert as invert};function joinToString(array,selector,options={}){const{separator=",",prefix="",suffix="",limit=-1,truncated="..."}=options;let result="";let index=0;for(const el of array){if(index>0){result+=separator;}if(limit>=0&&index>=limit){result+=truncated;break;}result+=selector(el);index++;}return prefix+result+suffix;}export{joinToString as joinToString};function mapKeys(record,transformer){const result={};for(const[key,value]of Object.entries(record)){const mappedKey=transformer(key);result[mappedKey]=value;}return result;}export{mapKeys as mapKeys};function mapNotNullish(array,transformer){const result=[];for(const element of array){const transformedElement=transformer(element);if(transformedElement!==undefined&&transformedElement!==null){result.push(transformedElement);}}return result;}export{mapNotNullish as mapNotNullish};function mapValues(record,transformer){const result={};const entries=Object.entries(record);for(const[key,value]of entries){const mappedValue=transformer(value,key);result[key]=mappedValue;}return result;}export{mapValues as mapValues};function maxBy(array,selector){let max;let maxValue;for(const current of array){const currentValue=selector(current);if(maxValue===undefined||currentValue>maxValue){max=current;maxValue=currentValue;}}return max;}export{maxBy as maxBy};function maxOf(array,selector){let maximumValue;for(const element of array){const currentValue=selector(element);if(maximumValue===undefined||currentValue>maximumValue){maximumValue=currentValue;continue;}if(Number.isNaN(currentValue)){return currentValue;}}return maximumValue;}export{maxOf as maxOf};function maxWith(array,comparator){let max;let isFirst=true;for(const current of array){if(isFirst||comparator(current,max)>0){max=current;isFirst=false;}}return max;}export{maxWith as maxWith};function minBy(array,selector){let min;let minValue;for(const current of array){const currentValue=selector(current);if(minValue===undefined||currentValue<minValue){min=current;minValue=currentValue;}}return min;}export{minBy as minBy};function minOf(array,selector){let minimumValue;for(const element of array){const currentValue=selector(element);if(minimumValue===undefined||currentValue<minimumValue){minimumValue=currentValue;continue;}if(Number.isNaN(currentValue)){return currentValue;}}return minimumValue;}export{minOf as minOf};function minWith(array,comparator){let min;let isFirst=true;for(const current of array){if(isFirst||comparator(current,min)<0){min=current;isFirst=false;}}return min;}export{minWith as minWith};function omit(obj,keys){const excludes=new Set(keys);return Object.fromEntries(Object.entries(obj).filter(([k,_])=>!excludes.has(k)));}export{omit as omit};function partition(array,predicate){const matches=[];const rest=[];for(const element of array){if(predicate(element)){matches.push(element);}else{rest.push(element);}}return[matches,rest];}export{partition as partition};function partitionEntries(record,predicate){const match={};const rest={};const entries=Object.entries(record);for(const[key,value]of entries){if(predicate([key,value])){match[key]=value;}else{rest[key]=value;}}return[match,rest];}export{partitionEntries as partitionEntries};function permutations(inputArray){const result=[];const array=[...inputArray];const k=array.length;if(k===0){return result;}const c=new Array(k).fill(0);result.push([...array]);let i=1;while(i<k){if(c[i]<i){if(i%2===0){[array[0],array[i]]=[array[i],array[0]];}else{[array[c[i]],array[i]]=[array[i],array[c[i]]];}result.push([...array]);c[i]+=1;i=1;}else{c[i]=0;i+=1;}}return result;}export{permutations as permutations};function pick(obj,keys){return Object.fromEntries(keys.map(k=>[k,obj[k]]));}export{pick as pick};function reduceGroups(record,reducer,initialValue){return mapValues(record,value=>value.reduce(reducer,initialValue));}export{reduceGroups as reduceGroups};function runningReduce(array,reducer,initialValue){let currentResult=initialValue;return array.map((el,currentIndex)=>currentResult=reducer(currentResult,el,currentIndex));}export{runningReduce as runningReduce};function randomInteger(lower,upper){return lower+Math.floor(Math.random()*(upper-lower+1));}function sample(array){const length=array.length;return length?array[randomInteger(0,length-1)]:undefined;}export{sample as sample};function slidingWindows(array,size,options={}){const{step=1,partial=false}=options;if(!Number.isInteger(size)||!Number.isInteger(step)||size<=0||step<=0){throw new RangeError("Both size and step must be positive integer.");}return Array.from({length:Math.floor((array.length-(partial?1:size))/step+1)},(_,i)=>array.slice(i*step,i*step+size));}export{slidingWindows as slidingWindows};function sortBy(array,selector,options){const len=array.length;const indexes=new Array(len);const selectors=new Array(len);const order=options?.order??"asc";array.forEach((element,index)=>{indexes[index]=index;const selected=selector(element);selectors[index]=Number.isNaN(selected)?null:selected;});indexes.sort((ai,bi)=>{let a=selectors[ai];let b=selectors[bi];if(order==="desc"){[a,b]=[b,a];}if(a===null)return 1;if(b===null)return-1;return a>b?1:a<b?-1:0;});for(let i=0;i<len;i++){indexes[i]=array[indexes[i]];}return indexes;}export{sortBy as sortBy};function sumOf(array,selector){let sum=0;for(const i of array){sum+=selector(i);}return sum;}export{sumOf as sumOf};function takeLastWhile(array,predicate){let offset=array.length;while(0<offset&&predicate(array[offset-1]))offset--;return array.slice(offset,array.length);}export{takeLastWhile as takeLastWhile};function takeWhile(array,predicate){let offset=0;const length=array.length;while(length>offset&&predicate(array[offset])){offset++;}return array.slice(0,offset);}export{takeWhile as takeWhile};function union(...arrays){const set=new Set;for(const array of arrays){for(const element of array){set.add(element);}}return Array.from(set);}export{union as union};function unzip(pairs){const{length}=pairs;const result=[new Array(length),new Array(length)];for(let i=0;i<length;++i){const pair=pairs[i];result[0][i]=pair[0];result[1][i]=pair[1];}return result;}export{unzip as unzip};function withoutAll(array,values){const toExclude=new Set(values);return array.filter(it=>!toExclude.has(it));}export{withoutAll as withoutAll};function zip(...arrays){const minLength=minOf(arrays,element=>element.length)??0;const result=new Array(minLength);for(let i=0;i<minLength;i+=1){const arr=arrays.map(it=>it[i]);result[i]=arr;}return result;}export{zip as zip};";
